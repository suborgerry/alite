<style>
  .ts-products-list {
    margin: 0 0 60px;
  }

  .ts-products-list .ts-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 50px;
  }

  .ts-products-list h2.ts-products__title {
    color: #000;
    font-size: 24px;
    font-style: normal;
    font-family: "ShopifySans" !important;
    font-weight: 500;
    line-height: normal;
    margin: 0 0 12px;
  }

  .ts-products {
    padding-right: 70px;
    display: grid;
    grid-template-columns: repeat({{ section.settings.products_show }}, 1fr);
    row-gap: 10px;
    column-gap: 10px;
    padding: 0;
  }

  .ts-product {
    border-radius: 5px;
    border: 1px solid #CCC;
    background: #FFF;
    overflow: hidden;
    width: 100%;
    display: flex;
    flex-direction:column;
  }

  .ts-product__media {
    display:flex;
    max-width: 160px;
    margin: 0 auto 5px;
  }

  .ts-product__media img {
    width: 100%;
    height: auto;
    object-fit: contain;
  }

  .ts-product__content {
    padding: 0 8px 12px;
    flex-grow:1;
    display:flex;
    flex-direction:column;
    justify-content:space-between;
  }

  .ts-products-list h3.ts-product__title {
    color: #000;
    font-family: "ShopifySans" !important;
    font-size: 12px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
    margin: 0 0 6px;
  }
  .ts-products-list h3.ts-product__title a {
    color: #000;
    text-decoration: none;
    font-size: 14px;
  }
   .ts-product:hover h3.ts-product__title a{
    text-decoration: underline;
  }

  .ts-product__price {
    display: flex;
    align-items: center;
    gap: 3px;
    font-family: "ShopifySans" !important;
    font-size: 12px;
    font-style: normal;
    font-weight: 500;
    line-height: 1;
    margin: 0 0 7px;
  }

  .ts-product__regular, 
  .ts-product__compare {
    color: #8D8D8D;
  }

  .ts-product__compare {
    text-decoration-line: line-through;
  }

  .ts-product__regular.ts-product__regular--sale {
    color: #EC4545;
  }

  .ts-product__quantity {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 35px;
    border-radius: 35px;
    border: 1px solid #EEE;
    margin: 0 0 7px;
  }

  .ts-product__quantity > span {
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .ts-product__quantity > span * {
    pointer-events: none;
  }

  .ts-product__quantity input {
    appearance: none;
    outline: none;
    border: none;
    box-shadow: none;
    margin: 0;
    padding: 0;
    color: #000;
    font-family: "ShopifySans" !important;
    font-size: 12px;
    font-style: normal;
    font-weight: 400;
    line-height: 1;
    text-align: center;
    width: 30px;
  }

  .ts-product__quantity input::-webkit-outer-spin-button,
  .ts-product__quantity input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .ts-product__quantity input[type=number] {
    -moz-appearance: textfield;
  }

  .ts-product__quantity input:focus-visible {
    border: none;
    box-shadow: none;
    outline: none;
  }

  .ts-product__button {
    width: 100%;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 35px;
    background: #000;
    height: 35px;
    color: #FFF;
    font-family: "ShopifySans" !important;
    font-size: 12px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
    cursor: pointer;
    transition-property: color,background-color,border-color,text-decoration-color,fill,stroke;
    transition-timing-function: cubic-bezier(.4,0,.2,1);
    transition-duration: .15s;
  }

  .ts-product__button * {
    pointer-events: none;
  }

  .ts-products:not([loading]) .ts-product__button:hover,
  .ts-products:not([loading]) .ts-product__button.active {
    color: #000;
    background: #DA9DFF;
  }

  .ts-product__button .ts-icon-loader {
    display: none;
    -webkit-animation: spin 1s linear infinite;
    -moz-animation: spin 1s linear infinite;
    animation: spin 1s linear infinite;
  }

  .ts-products[loading] .ts-product__button {
    cursor: no-drop;
    opacity: 0.5;
  }

  .ts-products[loading] .ts-product__button span:not(.ts-icon-loader) {
    display: none;
  }

  .ts-products[loading] .ts-product__button .ts-icon-loader {
    display: flex;
  }

  @-moz-keyframes spin { 
    100% { 
      -moz-transform: rotate(360deg); 
    } 
  }

  @-webkit-keyframes spin {
    100% {
      -webkit-transform: rotate(360deg);
    } 
  }

  @keyframes spin {
    100% {
      -webkit-transform: rotate(360deg); 
      transform:rotate(360deg); 
    } 
  }

  {% if section.settings.products_show > 3 %}
    @media screen and (max-width: 1200px) {
      .ts-products {
        padding: 0;
      }
    }
    @media screen and (max-width: 1200px) {
      .ts-products {
        grid-template-columns: repeat(4, 1fr);
      }
    }
  {% endif %}

  @media screen and (max-width: 749px) {
    .ts-products-list {
      margin: 0 0 30px;
    }

    .ts-products-list .ts-container {
      padding: 0 0 0 16px;
    }

    .ts-products {
      display: flex;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
      width: 100%;
      overflow: auto;
      padding-right: 16px;
    }

    .ts-product {
      min-width: 160px;
      scroll-snap-align: start;
    }
  }
</style>
<div {% if section.settings.custom_id != blank %}id="{{ section.settings.custom_id }}"{% endif %} class="ts-products-list section-{{ section.id }}">
  <div class="ts-container">
    {% if section.settings.title != blank %}
      <h2 class="ts-products__title">
        {{- section.settings.title | escape -}}
      </h2>
    {% endif %}

    {% if section.settings.products != blank %}
      <div class="ts-products">
        {% for product in section.settings.products %}
          <div class="ts-product" data-id="{{ product.first_available_variant.id }}">
            <a href="{{ product.url }}" class="ts-product__media" style="min-height: {{160 | divided_by: product.featured_image.aspect_ratio }}px">
              {{ product.featured_image | image_url: width: 320 | image_tag }}
            </a>
            <div class=ts-product__content>
              <h3 class="ts-product__title">
                <a href="{{ product.url }}">
                                    {{ product.title }}
                </a>
<div data-shop-id="{{shop.id}}" product-id="{{product.id }}" data-page="{{request.page_type}}" class="ddreview-star"></div>
              </h3>
              <div class="ts-product_info">
                <div class="ts-product__price">
                  <span class="ts-product__regular {% if product.compare_at_price != blank %}ts-product__regular--sale{% endif %}">
                    {{ product.price | money }}
                  </span>
  
                  {% if product.compare_at_price != blank %}
                    <span class="ts-product__compare">
                      {{ product.compare_at_price | money }}
                    </span>
                  {% endif %}
                </div>
  
                <div class="ts-product__quantity ts-quantity">
                  <span class="ts-quantity__minus">
                    <svg width="5" height="2" viewBox="0 0 5 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M4.67048 0.789551V1.72705H0.852295V0.789551H4.67048Z" fill="black"/>
                    </svg>
                  </span>
  
                  <input class="ts-quantity__input" type="number" name="quantity" value="1" min="0" max="99" />
  
                  <span class="ts-quantity__plus">
                    <svg width="6" height="7" viewBox="0 0 6 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M2.47732 6.40341V0.778409H3.43186V6.40341H2.47732ZM0.14209 4.06818V3.11364H5.76709V4.06818H0.14209Z" fill="black"/>
                    </svg>
                  </span>
                </div>
  
                <div class="ts-product__button">
                  <span>{{ 'ts.products.add_cart' | t }}</span>
                  <span class="ts-icon-loader">
                    <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M15 8.5C15 10.0772 14.4674 11.6081 13.4885 12.8447C12.5095 14.0813 11.1417 14.9511 9.60664 15.3131C8.07157 15.6751 6.45923 15.5081 5.03095 14.8391C3.60268 14.1702 2.44217 13.0385 1.73751 11.6275C1.03285 10.2165 0.825348 8.60886 1.14863 7.06517C1.47191 5.52149 2.30703 4.13221 3.51864 3.12251C4.73024 2.11281 6.24732 1.54187 7.824 1.50221C9.40068 1.46256 10.9445 1.95652 12.2054 2.90403" stroke="white"></path>
                    </svg> 
                  </span>
                </div>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% endif %}
  </div>
</div>

<script>
  (() => {
    document.querySelector(".section-{{ section.id }} .ts-products").addEventListener("click", (event) => {
      if (event.target.classList.contains("ts-quantity__minus")) {
        const quantity = event.target.closest(".ts-quantity").querySelector(".ts-quantity__input");
        if (quantity.value != 0) {
          quantity.value -= 1;
        }
      } else if (event.target.classList.contains("ts-quantity__plus")) {
        const quantity = event.target.closest(".ts-quantity").querySelector(".ts-quantity__input");
        if (quantity.value != 99) {
          quantity.value = parseInt(quantity.value) + 1;
        }
      } else if (event.target.classList.contains("ts-product__button")) {
        const quantity = parseInt(event.target.closest(".ts-product").querySelector(".ts-quantity__input").value);
        const productId = parseInt(event.target.closest(".ts-product").dataset.id);

        if (quantity > 0) {
          event.target.closest(".ts-products").setAttribute("loading", true);
          fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"items": [{"id": productId, "quantity": quantity}]})
          }).then((response) => response.json()).then(response => {
            if (response.items) {
              event.target.closest(".ts-products").removeAttribute("loading");
              event.target.classList.add("active");
              event.target.closest(".ts-product").querySelector(".ts-quantity__input").value = 1;
              if (tsUpdateCounts) tsUpdateCounts();
              {% if template.name == "cart" %}
                    location.reload()
              {% endif %}
            } else {
              if (response.message) {
                window.alert(response.message)
              }
            }
          })
        }
      }
    });

    document.querySelectorAll(".section-{{ section.id }} .ts-products input").forEach(input => {
      input.addEventListener("keyup", (event) => {
        const number = parseInt(event.target.value);

        if (number) {
          if (number > 99) {
            event.target.value = 99;
          } else {
            event.target.value = number;
          }
        }
      })
    })
  })();
</script>

{% schema %}
  {
    "name": "TS Product List",
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Title"
      },
      {
        "type": "product_list",
        "id": "products",
        "label": "Products",
        "limit": 48
      },
      {
        "type": "range",
        "id": "products_show",
        "label": "Products to show",
        "min": 2,
        "max": 6,
        "step": 1,
        "default": 6
      },
      {
        "type": "text",
        "id": "custom_id",
        "label": "Custom id"
      }
    ],
    "presets": [
      {
        "name": "TS Product List"
      }
    ]
  }
{% endschema %}
